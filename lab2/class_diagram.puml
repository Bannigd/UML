@startuml
skinparam classAttributeIconSize 0
hide empty members
!define datatype(x) class "x" << (D) DataType>>
!theme blueprint

datatype(Детали) {
	деталь : Деталь
	количество: int
}

datatype(Дата) {
	день : int
	месяц : int
	год : int
}

enum Пол {
	МУЖСКОЙ
	ЖЕНСКИЙ
}

class Деталь {
	
}

interface Манипулировать_деталями <<interface>> {
	+взять_детали(деталь : string, количество : int)
	+добавить_детали(деталь : string, количество : int)
}

Детали ..|> Манипулировать_деталями
Хранилище ..> Манипулировать_деталями :  "<<call>>"

abstract Хранилище {
	-ID : int {readonly}
	-ID_ответственного : int
	-содержимое : Детали
	+получить_ID() : int {query}
	+получить_ID_ответственного() : int {query}
	+получить_список_содержимого() : Детали {query}
	+получить_количество(деталь : string) : int {query}
	+сменить_ответственного(сотрудник : Сотрудник)
}

class Склад {
	-заказы : List<Заказ>
	
}

class Рабочее_место


Склад ---|> Хранилище
Рабочее_место ---|> Хранилище

class План{
	-детали : Детали
	-дедлайн : Дата
	+поменять_дедлайн(дата: Дата)
	+
}

class Заказ

interface Создавать <<interface>> {
	+создать_заказ()
	+проверить_выполнение()
}

interface Выполнять <<interface>> {
	+собрать_заказ()
}

Заказ ..|> Создавать
Заказ ..|> Выполнять
Сборщик ..> Создавать :  "<<call>>"
Кладовщик ..> Выполнять : "<<call>>"

class Задание


abstract Сотрудник {
	-фамилия : string
	-имя : string
	-отчество : string
	-ID : int {readonly}
	-пол : Пол
	-должность : string

	+изменить_фамилию(фамилия : string)
	+изменить_имя(имя : string)
	+изменить_отчество(отчество : string)
	+получить_ID() : int {query}
	+получить_ФИО() : string[1..3] {query}
}
class Кладовщик {
		
}

class Бригадир
class Сборщик

Сотрудник <|--- Кладовщик
Сотрудник <|--- Сборщик
Сотрудник <|--- Бригадир

@enduml
